(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{372:function(t,a,r){"use strict";r.r(a);var v=r(5),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"什么叫渲染-render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么叫渲染-render"}},[t._v("#")]),t._v(" 什么叫渲染-render")]),t._v(" "),a("blockquote",[a("p",[t._v("HTML字符串 ---\x3e 解析HTML ---\x3e 样式计算 ---\x3e 布局 ---\x3e 分层 ---\x3e 绘制 ---\x3e 分块 ---\x3e 光栅化 ---\x3e 画 ---\x3e 像素信息")]),t._v(" "),a("p",[t._v("当浏览器的网络线程收到HTML文档后。会产生一个渲染任务，并将其传递给渲染主线程的消息队列。\n在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。")]),t._v(" "),a("p",[t._v("整个渲染流程分为多个阶段，分别是:HTML解析、样式计算、布局、分层、绘制、分块、光栅化、画\n每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。\n这样，整个渲染流程就形成了一套组织严密的生产流水线。")])]),t._v(" "),a("h3",{attrs:{id:"解析html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析html"}},[t._v("#")]),t._v(" 解析HTML")]),t._v(" "),a("p",[t._v("为了提高解析效率，浏览器会启动一个预解析的线程，率先下载HTML中的外部CSS文件和外部的JS文件。")]),t._v(" "),a("p",[t._v("如果主线程解析到link位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析CSS的工作是在预解析线程中进行的。这就是CSS 不会阻塞HTML解析的根本原因。")]),t._v(" "),a("p",[t._v("如果主线程解析到script位置，会停止解析HTML，转而等待JS文件下载好，并将全局代码解析执行完成后，才能继续解析HTML。这是因为JS 代码的执行过程可能会修改当前的DOM 树，所以DOM树的生成必须暂停。这就是JS会阻塞HTML解析的根本原因。")]),t._v(" "),a("p",[t._v("第一步完成后，会得到DOM树和CSSOM树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在CSSOM树中。")]),t._v(" "),a("h4",{attrs:{id:"解析遇到css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析遇到css"}},[t._v("#")]),t._v(" 解析遇到CSS")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-002.png",alt:"解析遇到css"}})]),t._v(" "),a("h4",{attrs:{id:"解析遇到js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析遇到js"}},[t._v("#")]),t._v(" 解析遇到JS")]),t._v(" "),a("p",[t._v("渲染主线程遇到JS时必须暂停一切行为，等待下载执行完后才能继续")]),t._v(" "),a("p",[t._v("预解析线程可以分担一点下载JS的任务")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-001.png",alt:"解析遇到js"}})]),t._v(" "),a("h3",{attrs:{id:"样式计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[t._v("#")]),t._v(" 样式计算")]),t._v(" "),a("p",[t._v("主线程会遍历得到的DOM树，依次为树中的每个节点计算出它最终的样式，称之为Computed Style。")]),t._v(" "),a("p",[t._v("在这一过程中，很多预设值会变成绝对值，比如red会变成rgb(255,0,0)﹔相对单位会变成绝对单位，比如em会变成px。")]),t._v(" "),a("p",[t._v("这一步完成后，会得到一棵带有样式的DOM树。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-003.png",alt:"样式计算"}})]),t._v(" "),a("h3",{attrs:{id:"布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),a("p",[t._v("布局阶段会依次遍历DOM树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。")]),t._v(" "),a("p",[t._v("大部分时候，DOM树和布局树井非——对应。")]),t._v(" "),a("p",[t._v("比如display：none； 的节点没有几何信息，因此不会生成到布局树﹔又比如使用了伪元素选择器，虽然DOM树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致DoM树和布局树无法——对应。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-004.png",alt:"布局"}})]),t._v(" "),a("h3",{attrs:{id:"分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[t._v("#")]),t._v(" 分层")]),t._v(" "),a("p",[t._v("主线程会使用一套复杂的策略对整个布局树中进行分层。")]),t._v(" "),a("p",[t._v("分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。")]),t._v(" "),a("p",[t._v("滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过 will-change 届性更大程度的影响分层结果。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-005.png",alt:"分层"}})]),t._v(" "),a("h3",{attrs:{id:"绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制"}},[t._v("#")]),t._v(" 绘制")]),t._v(" "),a("p",[t._v("主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来")]),t._v(" "),a("p",[t._v("完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-006.png",alt:"绘制"}})]),t._v(" "),a("h3",{attrs:{id:"分块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分块"}},[t._v("#")]),t._v(" 分块")]),t._v(" "),a("p",[t._v("合成线程首先对每个图层进行分块，将其划分为更多的小区域")]),t._v(" "),a("p",[t._v("它会从线程池中拿取多个线程来完成分块工作")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-007.png",alt:"分块"}})]),t._v(" "),a("h3",{attrs:{id:"光栅化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#光栅化"}},[t._v("#")]),t._v(" 光栅化")]),t._v(" "),a("p",[t._v("合成线程会将块信息交给GPU进程，以极高的速度完成光栅化")]),t._v(" "),a("p",[t._v("GPU进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块")]),t._v(" "),a("p",[t._v("光栅化的结果，就是一块一块的位图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-008.png",alt:"光栅化"}})]),t._v(" "),a("h3",{attrs:{id:"画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#画"}},[t._v("#")]),t._v(" 画")]),t._v(" "),a("p",[t._v("合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。")]),t._v(" "),a("p",[t._v("指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。")]),t._v(" "),a("p",[t._v("变形发生在合成线程，与渲染主线程无关，这就是"),a("code",[t._v("transform")]),t._v("效率高的本质原因。")]),t._v(" "),a("p",[t._v("合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/static/2023-5-23-009.png",alt:"画"}})]),t._v(" "),a("h2",{attrs:{id:"什么是reflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是reflow"}},[t._v("#")]),t._v(" 什么是reflow？")]),t._v(" "),a("p",[t._v("reflow 的本质就是重新计算 layout 树。")]),t._v(" "),a("p",[t._v("当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。")]),t._v(" "),a("p",[t._v("为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。")]),t._v(" "),a("p",[t._v("也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。")]),t._v(" "),a("p",[t._v("浏览器在反复权衡下，最终决定获取属性立即 reflow。")]),t._v(" "),a("h2",{attrs:{id:"什么是repaint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是repaint"}},[t._v("#")]),t._v(" 什么是repaint？")]),t._v(" "),a("p",[t._v("repaint 的本质就是重新根据分层信息计算了绘制指令。")]),t._v(" "),a("p",[t._v("当改动了可见样式后，就需要重新计算，会引发 repaint。")]),t._v(" "),a("p",[t._v("由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。")]),t._v(" "),a("h2",{attrs:{id:"为什么transform的效率高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么transform的效率高"}},[t._v("#")]),t._v(" 为什么transform的效率高")]),t._v(" "),a("p",[t._v("因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段")]),t._v(" "),a("p",[t._v("由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。")]),t._v(" "),a("p",[t._v("反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。")])])}),[],!1,null,null,null);a.default=_.exports}}]);